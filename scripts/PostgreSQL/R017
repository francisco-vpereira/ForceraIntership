-------------------------------------------------------
-- 1. IDENTIFICAR VARIÁVEL PRINCIPAL : PREÇO CONTRATUAL
-------------------------------------------------------

--select preco_contratual from concursospublicos limit 10; 




------------------------------------------------------------------
-- 2.1 CALCULAR VALOR MÉDIO DO PREÇO CONTRATUAL PARA TODOS OS CPVs
------------------------------------------------------------------
-- SELECT AVG(preco_contratual) FROM concursospublicos;


--------------------------------------------
-- 2.2 FILTRAR CPV PELOS PRIMEIROS 3 DIGITOS
--------------------------------------------
-- SELECT SUBSTRING(cpv,1,3) FROM concursospublicos;

-- Existem 302 categorias para CPVs com 3 dígitos
-- SELECT DISTINCT(SUBSTRING(cpv,1,3)) FROM concursospublicos; 


-------------------------------------------------------------------
-- 2.3 CALCULAR PREÇO MÉDIO POR CADA COMBINAÇÃO DE CPV DE 3 DÍGITOS
-------------------------------------------------------------------
--SELECT AVG(preco_contratual), SUBSTRING(cpv,1,3)
--FROM concursospublicos
--GROUP BY SUBSTRING(cpv,1,3);



-----------------------------------------------------------
-- 2.4 CONTAR NÚMERO DE CONTRATOS POR CADA CATEGORIA DE CPV
-----------------------------------------------------------
--SELECT DISTINCT(SUBSTRING(cpv,1,3)), COUNT(*)
--FROM concursospublicos
--GROUP BY DISTINCT(SUBSTRING(cpv,1,3))
--ORDER BY SUBSTRING(cpv,1,3) DESC ;



---------------------------------------------------
-- 2.5 CONTAR PREÇO TOTAL POR CADA CATEGORIA DE CPV
---------------------------------------------------
--SELECT DISTINCT(SUBSTRING(cpv,1,3)), SUM(preco_contratual)
--FROM concursospublicos
--GROUP BY DISTINCT(SUBSTRING(cpv,1,3))
--ORDER BY SUBSTRING(cpv,1,3) DESC ;



--SELECT concursospublicos."id", preco_contratual, precoc_stat."mean", precoc_stat."std", precoc_stat."cpv3", cpv
--FROM concursospublicos
--JOIN precoc_stat ON SUBSTRING(concursospublicos."cpv",1,3) = precoc_stat.cpv3
--WHERE concursospublicos.preco_contratual < 1.5 * precoc_stat.mean AND concursospublicos.preco_contratual > 0.5 * precoc_stat.mean;




-------------------------------------------------------------------------------------------
-- Adicionar coluna com distância inter-quartil : Q3-Q1
-------------------------------------------------------------------------------------------
--ALTER TABLE precoc_stat
--ADD COLUMN dq DOUBLE PRECISION;
--
--UPDATE precoc_stat 
--SET dq = q3-q1;





-- Selecionar IDs cujo preco contratual seja um OUTLIER MODERADO
--SELECT contratos_basegov."id", contratos_basegov."preco_contratual", precoc_stat."mean", 
--		precoc_stat."q3" + 3*precoc_stat."dq" AS lim_superior,  precoc_stat."q1" - 3*precoc_stat."dq" AS lim_inferior,
--	    precoc_stat."q1",precoc_stat."q2",precoc_stat."q3"
--FROM contratos_basegov 
--JOIN concursos_publicos ON contratos_basegov."id" = concursos_publicos."id"
--JOIN precoc_stat ON SUBSTRING(contratos_basegov."cpv", 1, 3) = precoc_stat."cpv"
--WHERE contratos_basegov."preco_contratual" > precoc_stat."q3" + 1.5*precoc_stat."dq" OR
--	  contratos_basegov."preco_contratual" < precoc_stat."q1" - 1.5*precoc_stat."dq";




-- Selecionar IDs cujo NEC seja um outlier calculado a partir da constante de Medcouple
SELECT contratos_basegov."id", contratos_basegov."preco_contratual", lower_fence, upper_fence
FROM contratos_basegov 
JOIN concursos_publicos ON contratos_basegov."id" = concursos_publicos."id"
JOIN precoc_stat ON SUBSTRING(contratos_basegov."cpv", 1, 3) = precoc_stat."cpv"
WHERE contratos_basegov."preco_contratual" < lower_fence OR
	  contratos_basegov."preco_contratual" > upper_fence;